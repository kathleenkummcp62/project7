#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö VPN –≤–µ–Ω–¥–æ—Ä–æ–≤
–°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VPN —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–∞—Ö
"""

import os
import sys
import json
import time
import random
import argparse
import paramiko
from pathlib import Path
from concurrent.futures import ThreadPoolExecutor

# –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
parser = argparse.ArgumentParser(description="VPN Test Tasks")
parser.add_argument("--config", default="vpn_test_config.json", help="–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤")
parser.add_argument("--vendor", help="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤–µ–Ω–¥–æ—Ä (fortinet, paloalto, sonicwall, sophos, watchguard, cisco)")
parser.add_argument("--worker", help="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≤–æ—Ä–∫–µ—Ä–µ (IP)")
parser.add_argument("--output-dir", default="test_results", help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
parser.add_argument("--verbose", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
args = parser.parse_args()

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
os.makedirs(args.output_dir, exist_ok=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
def load_config(config_file):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(config_file, 'r') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)

# –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–∞
def parse_worker(worker_str):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–æ—Ä–∫–µ—Ä–∞"""
    parts = worker_str.split(':')
    if len(parts) != 4:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–∞: {worker_str}")
        return None
    
    return {
        'ip': parts[0],
        'port': int(parts[1]),
        'username': parts[2],
        'password': parts[3]
    }

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–æ—Ä–∫–µ—Ä—É –ø–æ SSH
def connect_to_worker(worker):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–æ—Ä–∫–µ—Ä—É –ø–æ SSH"""
    try:
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(
            worker['ip'],
            port=worker['port'],
            username=worker['username'],
            password=worker['password'],
            timeout=10
        )
        return client
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–æ—Ä–∫–µ—Ä—É {worker['ip']}: {e}")
        return None

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞
def prepare_worker(worker):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    client = connect_to_worker(worker)
    if not client:
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        stdin, stdout, stderr = client.exec_command("mkdir -p /root/NAM/Servis /root/NAM/Check")
        if stderr.read():
            print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –Ω–∞ {worker['ip']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Python –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
        stdin, stdout, stderr = client.exec_command("python3 -c 'import aiohttp, asyncio, aiofiles' 2>/dev/null || echo 'missing'")
        if stdout.read().decode().strip() == 'missing':
            print(f"üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –Ω–∞ {worker['ip']}...")
            stdin, stdout, stderr = client.exec_command("pip3 install aiohttp aiofiles")
            if stderr.read():
                print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–¥—É–ª–µ–π –Ω–∞ {worker['ip']}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫–∞–Ω–µ—Ä
        sftp = client.open_sftp()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–∫–∞–Ω–µ—Ä–∞
        scanner_code = """#!/usr/bin/env python3
import os
import sys
import json
import time
import random
import asyncio
import aiohttp
import aiofiles
import argparse
from pathlib import Path

# –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
parser = argparse.ArgumentParser(description="VPN Scanner")
parser.add_argument("--vpn-type", required=True, help="–¢–∏–ø VPN")
parser.add_argument("--creds-file", required=True, help="–§–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
parser.add_argument("--output", default="valid.txt", help="–§–∞–π–ª –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
args = parser.parse_args()

# –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
with open(args.creds_file, "r") as f:
    credentials = [line.strip() for line in f if line.strip() and not line.startswith("#")]

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
stats = {
    "goods": 0,
    "bads": 0,
    "errors": 0,
    "offline": 0,
    "ipblock": 0,
    "processed": 0,
    "rps": 0
}

# –§–∞–π–ª –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
stats_file = f"stats_{os.getpid()}.json"

# –°–∏–º—É–ª—è—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
async def main():
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞ {args.vpn_type.upper()}")
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(credentials)} —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    start_time = time.time()
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    async with aiofiles.open(args.output, "w") as valid_file:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å
        for cred in credentials:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
            await asyncio.sleep(random.uniform(0.5, 2.0))
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
            result = random.choice(["valid", "invalid", "error", "offline"])
            
            if result == "valid":
                stats["goods"] += 1
                await valid_file.write(f"{cred}\\n")
                print(f"‚úÖ VALID: {cred}")
            elif result == "invalid":
                stats["bads"] += 1
                print(f"‚ùå INVALID: {cred}")
            elif result == "error":
                stats["errors"] += 1
                print(f"‚ö†Ô∏è ERROR: {cred}")
            elif result == "offline":
                stats["offline"] += 1
                print(f"üîå OFFLINE: {cred}")
            
            stats["processed"] += 1
            stats["rps"] = stats["processed"] / (time.time() - start_time)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            with open(stats_file, "w") as f:
                json.dump(stats, f)
            
            # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print(f"\\rüî• G:{stats['goods']} B:{stats['bads']} E:{stats['errors']} Off:{stats['offline']} Blk:{stats['ipblock']} | ‚ö°{stats['rps']:.1f}/s | ‚è±Ô∏è{int(time.time() - start_time)}s", end="")
    
    print("\\n‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main())
"""
        
        temp_scanner = Path("temp_scanner.py")
        with open(temp_scanner, "w") as f:
            f.write(scanner_code)
        
        sftp.put(str(temp_scanner), "/root/NAM/Servis/vpn_scanner.py")
        sftp.chmod("/root/NAM/Servis/vpn_scanner.py", 0o755)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_scanner)
        
        sftp.close()
        client.close()
        
        print(f"‚úÖ –í–æ—Ä–∫–µ—Ä {worker['ip']} –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤–æ—Ä–∫–µ—Ä–∞ {worker['ip']}: {e}")
        client.close()
        return False

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def create_credentials_file(worker, vendor, targets):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    client = connect_to_worker(worker)
    if not client:
        return False
    
    try:
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∑–∞–º–µ–Ω—è–µ–º : –Ω–∞ ;)
        fixed_targets = []
        for target in targets:
            fixed_target = target.replace(':', ';', 2)  # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –¥–≤–∞ –¥–≤–æ–µ—Ç–æ—á–∏—è
            fixed_targets.append(fixed_target)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        sftp = client.open_sftp()
        creds_file = f"/root/NAM/Check/{vendor}_creds.txt"
        with sftp.file(creds_file, "w") as f:
            f.write("\n".join(fixed_targets))
        
        sftp.close()
        client.close()
        
        print(f"‚úÖ –§–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è {vendor} —Å–æ–∑–¥–∞–Ω –Ω–∞ {worker['ip']}")
        return creds_file
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞ {worker['ip']}: {e}")
        client.close()
        return False

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
def run_test_task(worker, vendor, creds_file):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –≤–æ—Ä–∫–µ—Ä–µ"""
    client = connect_to_worker(worker)
    if not client:
        return False
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–µ—Ä
        output_file = f"/root/NAM/Servis/valid_{vendor}.txt"
        command = f"cd /root/NAM/Servis && python3 vpn_scanner.py --vpn-type {vendor} --creds-file {creds_file} --output {output_file}"
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞–Ω–∏—è {vendor} –Ω–∞ {worker['ip']}...")
        stdin, stdout, stderr = client.exec_command(command)
        
        # –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        time.sleep(5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
        stdin, stdout, stderr = client.exec_command("ps aux | grep vpn_scanner | grep -v grep")
        if not stdout.read():
            print(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ {vendor} –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å –Ω–∞ {worker['ip']}")
            client.close()
            return False
        
        print(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ {vendor} –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ {worker['ip']}")
        client.close()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞–Ω–∏—è {vendor} –Ω–∞ {worker['ip']}: {e}")
        client.close()
        return False

# –°–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def collect_results(worker, vendor):
    """–°–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤–æ—Ä–∫–µ—Ä–∞"""
    client = connect_to_worker(worker)
    if not client:
        return None
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        sftp = client.open_sftp()
        valid_file = f"/root/NAM/Servis/valid_{vendor}.txt"
        stats_file = None
        
        # –ò—â–µ–º —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        try:
            stats_files = [f for f in sftp.listdir("/root/NAM/Servis") if f.startswith("stats_") and f.endswith(".json")]
            if stats_files:
                stats_file = f"/root/NAM/Servis/{stats_files[0]}"
        except:
            pass
        
        results = {
            "valid_entries": [],
            "stats": None
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        try:
            with sftp.file(valid_file, "r") as f:
                results["valid_entries"] = [line.strip() for line in f.readlines()]
        except:
            print(f"‚ö†Ô∏è –§–∞–π–ª —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ {worker['ip']}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if stats_file:
            try:
                with sftp.file(stats_file, "r") as f:
                    results["stats"] = json.loads(f.read())
            except:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ {worker['ip']}")
        
        sftp.close()
        client.close()
        
        return results
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å {worker['ip']}: {e}")
        client.close()
        return None

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
def save_results(worker, vendor, results):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª"""
    if not results:
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–µ–Ω–¥–æ—Ä–∞
        vendor_dir = Path(args.output_dir) / vendor
        os.makedirs(vendor_dir, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        valid_file = vendor_dir / f"{worker['ip']}_valid.txt"
        with open(valid_file, "w") as f:
            f.write("\n".join(results["valid_entries"]))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if results["stats"]:
            stats_file = vendor_dir / f"{worker['ip']}_stats.json"
            with open(stats_file, "w") as f:
                json.dump(results["stats"], f, indent=2)
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã {vendor} —Å {worker['ip']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ {vendor} —Å {worker['ip']}: {e}")
        return False

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è VPN –≤–µ–Ω–¥–æ—Ä–æ–≤")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config(args.config)
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –≤–æ—Ä–∫–µ—Ä–æ–≤
    workers = [parse_worker(worker_str) for worker_str in config["workers"]]
    workers = [w for w in workers if w]  # –§–∏–ª—å—Ç—Ä—É–µ–º None
    
    if not workers:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤–∞–ª–∏–¥–Ω—ã–µ –≤–æ—Ä–∫–µ—Ä—ã")
        return False
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(workers)} –≤–æ—Ä–∫–µ—Ä–æ–≤")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–æ—Ä–∫–µ—Ä—ã, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π
    if args.worker:
        workers = [w for w in workers if w['ip'] == args.worker]
        if not workers:
            print(f"‚ùå –í–æ—Ä–∫–µ—Ä {args.worker} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–µ–Ω–¥–æ—Ä–æ–≤, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π
    vendors = list(config["tasks"].keys())
    if args.vendor:
        if args.vendor not in vendors:
            print(f"‚ùå –í–µ–Ω–¥–æ—Ä {args.vendor} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        vendors = [args.vendor]
    
    print(f"üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {len(vendors)} –≤–µ–Ω–¥–æ—Ä–æ–≤: {', '.join(vendors)}")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã
    print("\nüîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤...")
    prepared_workers = []
    for worker in workers:
        if prepare_worker(worker):
            prepared_workers.append(worker)
    
    if not prepared_workers:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞")
        return False
    
    print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(prepared_workers)} –≤–æ—Ä–∫–µ—Ä–æ–≤")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–¥–∞–Ω–∏—è –º–µ–∂–¥—É –≤–æ—Ä–∫–µ—Ä–∞–º–∏
    tasks = []
    for i, vendor in enumerate(vendors):
        worker = prepared_workers[i % len(prepared_workers)]
        targets = config["tasks"][vendor]["targets"]
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        creds_file = create_credentials_file(worker, vendor, targets)
        if not creds_file:
            continue
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
        if run_test_task(worker, vendor, creds_file):
            tasks.append({
                "worker": worker,
                "vendor": vendor,
                "creds_file": creds_file
            })
    
    if not tasks:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è")
        return False
    
    print(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞–Ω–∏–π")
    
    # –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
    print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π (30 —Å–µ–∫—É–Ω–¥)...")
    time.sleep(30)
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüì• –°–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    for task in tasks:
        results = collect_results(task["worker"], task["vendor"])
        if results:
            save_results(task["worker"], task["vendor"], results)
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    return True

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)