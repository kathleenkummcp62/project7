#!/usr/bin/env python3
"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ PostgreSQL –¥–ª—è VPN —Å–∫–∞–Ω–µ—Ä–∞
"""

import os
import sys
import json
import time
import subprocess
import argparse
from pathlib import Path

# –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
parser = argparse.ArgumentParser(description="PostgreSQL Setup")
parser.add_argument("--port", type=int, default=5432, help="–ü–æ—Ä—Ç –¥–ª—è PostgreSQL")
parser.add_argument("--user", default="postgres", help="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
parser.add_argument("--password", default="postgres", help="–ü–∞—Ä–æ–ª—å")
parser.add_argument("--db-name", default="vpn_data", help="–ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
parser.add_argument("--init-schema", action="store_true", help="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
args = parser.parse_args()

def run_command(cmd, check=True):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    print(f"üìã –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {' '.join(cmd)}")
    result = subprocess.run(cmd, capture_output=True, text=True)
    
    if result.stdout:
        print(result.stdout)
    
    if result.stderr:
        print(f"‚ö†Ô∏è {result.stderr}", file=sys.stderr)
    
    if check and result.returncode != 0:
        print(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ {result.returncode})")
        sys.exit(1)
    
    return result

def check_postgres_running():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ PostgreSQL"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å postgres
        result = subprocess.run(
            ["pg_isready", "-h", "localhost", "-p", str(args.port)],
            capture_output=True, text=True
        )
        return result.returncode == 0
    except FileNotFoundError:
        return False

def start_postgres():
    """–ó–∞–ø—É—Å–∫ PostgreSQL"""
    if check_postgres_running():
        print("‚úÖ PostgreSQL —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        return True
    
    print("üöÄ –ó–∞–ø—É—Å–∫ PostgreSQL...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ PostgreSQL
    try:
        run_command(["pg_ctl", "--version"], check=False)
    except FileNotFoundError:
        print("‚ùå PostgreSQL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PostgreSQL:")
        print("  - Ubuntu/Debian: sudo apt install postgresql")
        print("  - macOS: brew install postgresql")
        print("  - Windows: https://www.postgresql.org/download/windows/")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º PostgreSQL
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ pg_ctl
        data_dir = os.environ.get("PGDATA", "/usr/local/var/postgres")
        run_command(["pg_ctl", "-D", data_dir, "start"], check=False)
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å PostgreSQL —á–µ—Ä–µ–∑ pg_ctl: {e}")
        print("–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã...")
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ systemd
            run_command(["sudo", "systemctl", "start", "postgresql"], check=False)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å PostgreSQL —á–µ—Ä–µ–∑ systemd: {e}")
            
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ service
                run_command(["sudo", "service", "postgresql", "start"], check=False)
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å PostgreSQL —á–µ—Ä–µ–∑ service: {e}")
                return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ª–∏ PostgreSQL
    for _ in range(5):
        if check_postgres_running():
            print("‚úÖ PostgreSQL —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            return True
        time.sleep(1)
    
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å PostgreSQL")
    return False

def create_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print(f"üóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö {args.db_name}...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        result = subprocess.run(
            ["psql", "-h", "localhost", "-p", str(args.port), "-U", args.user, "-lqt"],
            capture_output=True, text=True,
            env=dict(os.environ, PGPASSWORD=args.password)
        )
        
        if args.db_name in result.stdout:
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {args.db_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return True
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        run_command(
            ["createdb", "-h", "localhost", "-p", str(args.port), "-U", args.user, args.db_name],
            env=dict(os.environ, PGPASSWORD=args.password)
        )
        
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {args.db_name} —Å–æ–∑–¥–∞–Ω–∞")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def init_schema():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
    tables_sql = [
        # VPN Credentials
        """
        CREATE TABLE IF NOT EXISTS vendor_urls (
            id SERIAL PRIMARY KEY,
            url TEXT NOT NULL
        )
        """,
        
        """
        CREATE TABLE IF NOT EXISTS credentials (
            id SERIAL PRIMARY KEY,
            ip TEXT NOT NULL,
            username TEXT NOT NULL,
            password TEXT NOT NULL
        )
        """,
        
        """
        CREATE TABLE IF NOT EXISTS proxies (
            id SERIAL PRIMARY KEY,
            address TEXT NOT NULL,
            username TEXT,
            password TEXT
        )
        """,
        
        """
        CREATE TABLE IF NOT EXISTS tasks (
            id SERIAL PRIMARY KEY,
            vpn_type TEXT,
            vendor_url_id INTEGER REFERENCES vendor_urls(id),
            server TEXT,
            status TEXT
        )
        """,
        
        """
        CREATE TABLE IF NOT EXISTS logs (
            id SERIAL PRIMARY KEY,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            level TEXT,
            message TEXT,
            source TEXT
        )
        """
    ]
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å—ã
        for sql in tables_sql:
            run_command(
                ["psql", "-h", "localhost", "-p", str(args.port), "-U", args.user, "-d", args.db_name, "-c", sql],
                env=dict(os.environ, PGPASSWORD=args.password)
            )
        
        print("‚úÖ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ö–µ–º—ã: {e}")
        return False

def load_test_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤ creds/*.txt
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º URL-–∞–¥—Ä–µ—Å–∞ VPN
        vpn_types = {
            "fortinet": ["https://200.113.15.26:4443", "https://195.150.192.5:443", "https://88.117.174.186:443"],
            "paloalto": ["https://216.229.124.44:443", "https://72.26.131.86:443", "https://216.247.223.23:443"],
            "sonicwall": ["https://69.21.239.19:4433", "https://68.189.7.50:4433", "https://74.92.44.25:4433"],
            "sophos": ["https://213.139.132.204:6443", "https://124.254.117.194:8443", "https://80.151.100.43:4433"],
            "watchguard": ["https://96.92.230.186:443", "https://75.146.37.105:444", "https://50.86.120.107:443"],
            "cisco": ["https://74.209.225.52:443", "https://67.202.240.148:443", "https://72.23.123.187:443"]
        }
        
        for vpn_type, urls in vpn_types.items():
            for url in urls:
                # –î–æ–±–∞–≤–ª—è–µ–º URL
                insert_url_sql = f"INSERT INTO vendor_urls (url) VALUES ('{url}') RETURNING id"
                result = subprocess.run(
                    ["psql", "-h", "localhost", "-p", str(args.port), "-U", args.user, "-d", args.db_name, "-t", "-c", insert_url_sql],
                    capture_output=True, text=True,
                    env=dict(os.environ, PGPASSWORD=args.password)
                )
                
                vendor_id = result.stdout.strip()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
                insert_task_sql = f"INSERT INTO tasks (vpn_type, vendor_url_id, server, status) VALUES ('{vpn_type}', {vendor_id}, 'server1.example.com', 'pending')"
                run_command(
                    ["psql", "-h", "localhost", "-p", str(args.port), "-U", args.user, "-d", args.db_name, "-c", insert_task_sql],
                    env=dict(os.environ, PGPASSWORD=args.password)
                )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤
        creds_dir = Path("creds")
        for vpn_file in creds_dir.glob("*.txt"):
            if vpn_file.is_file():
                with open(vpn_file, "r") as f:
                    for line in f:
                        line = line.strip()
                        if not line or line.startswith("#"):
                            continue
                        
                        parts = line.split(";")
                        if len(parts) >= 3:
                            ip = parts[0]
                            username = parts[1]
                            password = parts[2]
                            
                            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                            ip = ip.replace("'", "''")
                            username = username.replace("'", "''")
                            password = password.replace("'", "''")
                            
                            insert_cred_sql = f"INSERT INTO credentials (ip, username, password) VALUES ('{ip}', '{username}', '{password}')"
                            run_command(
                                ["psql", "-h", "localhost", "-p", str(args.port), "-U", args.user, "-d", args.db_name, "-c", insert_cred_sql],
                                env=dict(os.environ, PGPASSWORD=args.password),
                                check=False
                            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–∫—Å–∏
        proxies = [
            "127.0.0.1:1080",
            "127.0.0.1:1081",
            "127.0.0.1:1082"
        ]
        
        for proxy in proxies:
            insert_proxy_sql = f"INSERT INTO proxies (address, username, password) VALUES ('{proxy}', 'proxyuser', 'proxypass')"
            run_command(
                ["psql", "-h", "localhost", "-p", str(args.port), "-U", args.user, "-d", args.db_name, "-c", insert_proxy_sql],
                env=dict(os.environ, PGPASSWORD=args.password)
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏
        logs = [
            ("info", "–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞", "system"),
            ("info", "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ", "database"),
            ("warning", "–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ CPU", "system"),
            ("error", "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É 192.168.1.1", "scanner"),
            ("info", "–ù–∞–π–¥–µ–Ω–æ 10 –≤–∞–ª–∏–¥–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", "scanner")
        ]
        
        for level, message, source in logs:
            message = message.replace("'", "''")
            insert_log_sql = f"INSERT INTO logs (level, message, source) VALUES ('{level}', '{message}', '{source}')"
            run_command(
                ["psql", "-h", "localhost", "-p", str(args.port), "-U", args.user, "-d", args.db_name, "-c", insert_log_sql],
                env=dict(os.environ, PGPASSWORD=args.password)
            )
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
if __name__ == "__main__":
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL –¥–ª—è VPN —Å–∫–∞–Ω–µ—Ä–∞")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º PostgreSQL
    if not start_postgres():
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if not create_database():
        sys.exit(1)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if args.init_schema:
        if not init_schema():
            sys.exit(1)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not load_test_data():
            sys.exit(1)
    
    print("\n‚úÖ PostgreSQL –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    print(f"üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
    print(f"  - –•–æ—Å—Ç: localhost")
    print(f"  - –ü–æ—Ä—Ç: {args.port}")
    print(f"  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {args.user}")
    print(f"  - –ü–∞—Ä–æ–ª—å: {args.password}")
    print(f"  - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {args.db_name}")