#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–∞—Ö
"""

import os
import sys
import time
import json
import paramiko
import argparse
from pathlib import Path

# –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
parser = argparse.ArgumentParser(description="Run Remote Scan")
parser.add_argument("--credentials", default="credentials.txt", help="–§–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ SSH")
parser.add_argument("--vpn-type", required=True, help="–¢–∏–ø VPN –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
parser.add_argument("--remote-dir", default="/root/NAM/Servis", help="–£–¥–∞–ª–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ —Å–∫—Ä–∏–ø—Ç–∞–º–∏")
parser.add_argument("--verbose", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
args = parser.parse_args()

def parse_credentials(filename):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    credentials = []
    try:
        with open(filename, "r") as f:
            for line in f:
                line = line.strip()
                if not line or line.startswith("#"):
                    continue
                
                parts = line.split(";")
                if len(parts) != 3:
                    print(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: {line}")
                    continue
                
                ip, username, password = parts
                credentials.append((ip, username, password))
        
        return credentials
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
        return []

def get_script_for_vpn_type(vpn_type):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è —Ç–∏–ø–∞ VPN"""
    scripts = {
        "fortinet": "sers1.py",
        "paloalto": "sers2.go",
        "sonicwall": "sers3.py",
        "sophos": "test_scanner.py --vpn-type sophos",
        "watchguard": "test_scanner.py --vpn-type watchguard",
        "cisco": "sers4.go"
    }
    
    return scripts.get(vpn_type.lower(), f"test_scanner.py --vpn-type {vpn_type}")

def run_remote_scan(ip, username, password):
    """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º –≤–æ—Ä–∫–µ—Ä–µ"""
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ {ip}")
    
    try:
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(ip, username=username, password=password, timeout=10)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        script = get_script_for_vpn_type(args.vpn_type)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        if script.endswith(".py"):
            cmd = f"cd {args.remote_dir} && python3 {script}"
        elif script.endswith(".go"):
            cmd = f"cd {args.remote_dir} && go run {script}"
        else:
            cmd = f"cd {args.remote_dir} && ./{script}"
        
        print(f"üìã –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {cmd}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        stdin, stdout, stderr = client.exec_command(f"nohup {cmd} > /dev/null 2>&1 &")
        exit_status = stdout.channel.recv_exit_status()
        
        if exit_status != 0:
            error = stderr.read().decode().strip()
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {error}")
            client.close()
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
        time.sleep(2)
        if script.endswith(".py"):
            check_cmd = f"pgrep -f '{script}'"
        elif script.endswith(".go"):
            check_cmd = f"pgrep -f '{script.split()[0]}'"
        else:
            check_cmd = f"pgrep -f '{script}'"
        
        stdin, stdout, stderr = client.exec_command(check_cmd)
        pid = stdout.read().decode().strip()
        
        if pid:
            print(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ {ip} (PID: {pid})")
            client.close()
            return True
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ {ip}")
            client.close()
            return False
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {ip}: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {args.vpn_type.upper()} –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–∞—Ö")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø VPN
    valid_vpn_types = ["fortinet", "paloalto", "sonicwall", "sophos", "watchguard", "cisco"]
    if args.vpn_type.lower() not in valid_vpn_types:
        print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø VPN: {args.vpn_type}")
        print(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã: {', '.join(valid_vpn_types)}")
    
    # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    credentials = parse_credentials(args.credentials)
    if not credentials:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return False
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(credentials)} –≤–æ—Ä–∫–µ—Ä–æ–≤")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥–æ–º –≤–æ—Ä–∫–µ—Ä–µ
    results = {}
    for ip, username, password in credentials:
        results[ip] = run_remote_scan(ip, username, password)
    
    # –í—ã–≤–æ–¥–∏–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—É—Å–∫–∞:")
    success_count = sum(1 for success in results.values() if success)
    for ip, success in results.items():
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {ip}")
    
    print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ {success_count} –∏–∑ {len(credentials)} –≤–æ—Ä–∫–µ—Ä–æ–≤")
    return success_count > 0

if __name__ == "__main__":
    try:
        if main():
            print("\n‚úÖ –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print("\n‚ùå –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
    except KeyboardInterrupt:
        print("\nüõë –ó–∞–ø—É—Å–∫ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)