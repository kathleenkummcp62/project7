#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ VPN —Å–∫–∞–Ω–µ—Ä–∞
"""

import os
import sys
import time
import signal
import argparse
import subprocess
from pathlib import Path

# –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
parser = argparse.ArgumentParser(description="Run All Components")
parser.add_argument("--dashboard-port", type=int, default=8080, help="–ü–æ—Ä—Ç –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞")
parser.add_argument("--setup", action="store_true", help="–í—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
parser.add_argument("--vpn-type", help="–¢–∏–ø VPN –¥–ª—è –∑–∞–ø—É—Å–∫–∞ (all –¥–ª—è –≤—Å–µ—Ö)")
args = parser.parse_args()

# –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
processes = []

def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    
    for process in processes:
        try:
            process.terminate()
        except:
            pass
    
    sys.exit(0)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

def run_command(cmd, wait=True):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã"""
    print(f"üìã –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {' '.join(cmd)}")
    
    if wait:
        result = subprocess.run(cmd, capture_output=True, text=True)
        if result.stdout:
            print(result.stdout)
        if result.stderr:
            print(f"‚ö†Ô∏è {result.stderr}", file=sys.stderr)
        return result
    else:
        process = subprocess.Popen(cmd)
        processes.append(process)
        return process

def setup():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    if args.setup:
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞
        run_command(["python3", "dashboard_setup.py", "--setup"])
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        os.makedirs("Generated", exist_ok=True)
        os.makedirs("Valid", exist_ok=True)
        
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def start_dashboard():
    """–ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞ –Ω–∞ –ø–æ—Ä—Ç—É {args.dashboard_port}...")
    dashboard_process = run_command(
        ["go", "run", "cmd/dashboard/main.go", f"-port={args.dashboard_port}"],
        wait=False
    )
    
    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
    time.sleep(2)
    
    if dashboard_process.poll() is not None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–∞—à–±–æ—Ä–¥")
        sys.exit(1)
    
    print(f"‚úÖ –î–∞—à–±–æ—Ä–¥ –∑–∞–ø—É—â–µ–Ω: http://localhost:{args.dashboard_port}")

def start_scanners():
    """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–æ–≤"""
    if args.vpn_type:
        print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–æ–≤ –¥–ª—è {args.vpn_type}...")
        
        cmd = ["python3", "scanner_manager.py"]
        if args.vpn_type:
            cmd.extend(["--vpn-type", args.vpn_type])
        
        run_command(cmd)
    else:
        print("‚ÑπÔ∏è –°–∫–∞–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã (–Ω–µ —É–∫–∞–∑–∞–Ω --vpn-type)")

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ VPN —Å–∫–∞–Ω–µ—Ä–∞")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    setup()
    
    # –ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞
    start_dashboard()
    
    # –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–æ–≤
    start_scanners()
    
    print("\n‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    
    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    try:
        for process in processes:
            process.wait()
    except KeyboardInterrupt:
        signal_handler(signal.SIGINT, None)