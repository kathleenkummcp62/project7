#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è VPN –≤–µ–Ω–¥–æ—Ä–æ–≤
"""

import os
import sys
import json
import time
import argparse
import subprocess
from pathlib import Path

# –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
parser = argparse.ArgumentParser(description="Run VPN Tests")
parser.add_argument("--config", default="vpn_test_config.json", help="–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤")
parser.add_argument("--vendor", help="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤–µ–Ω–¥–æ—Ä")
parser.add_argument("--worker", help="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≤–æ—Ä–∫–µ—Ä–µ (IP)")
parser.add_argument("--output-dir", default="test_results", help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
parser.add_argument("--verbose", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
args = parser.parse_args()

def run_command(cmd, description=None, check=True):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    if description:
        print(f"üìã {description}")
    
    print(f"$ {' '.join(cmd)}")
    
    result = subprocess.run(cmd, capture_output=True, text=True)
    
    if result.stdout:
        print(result.stdout)
    
    if result.stderr:
        print(f"‚ö†Ô∏è {result.stderr}")
    
    if check and result.returncode != 0:
        print(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ {result.returncode})")
        return False
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è VPN –≤–µ–Ω–¥–æ—Ä–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
    try:
        import paramiko
    except ImportError:
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π...")
        run_command(["pip", "install", "paramiko"], "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ paramiko")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è
    cmd = ["python3", "vpn_test_tasks.py"]
    
    if args.vendor:
        cmd.extend(["--vendor", args.vendor])
    
    if args.worker:
        cmd.extend(["--worker", args.worker])
    
    if args.output_dir:
        cmd.extend(["--output-dir", args.output_dir])
    
    if args.verbose:
        cmd.append("--verbose")
    
    if args.config:
        cmd.extend(["--config", args.config])
    
    run_command(cmd, "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if os.path.exists(args.output_dir):
        vendors = [d for d in os.listdir(args.output_dir) if os.path.isdir(os.path.join(args.output_dir, d))]
        
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        for vendor in vendors:
            vendor_dir = os.path.join(args.output_dir, vendor)
            valid_files = [f for f in os.listdir(vendor_dir) if f.endswith("_valid.txt")]
            stats_files = [f for f in os.listdir(vendor_dir) if f.endswith("_stats.json")]
            
            valid_count = 0
            for valid_file in valid_files:
                with open(os.path.join(vendor_dir, valid_file), "r") as f:
                    valid_count += len(f.readlines())
            
            print(f"‚úÖ {vendor.upper()}: –Ω–∞–π–¥–µ–Ω–æ {valid_count} –≤–∞–ª–∏–¥–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ {len(valid_files)} –≤–æ—Ä–∫–µ—Ä–∞—Ö")
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            for stats_file in stats_files:
                worker_ip = stats_file.split("_")[0]
                with open(os.path.join(vendor_dir, stats_file), "r") as f:
                    stats = json.load(f)
                
                print(f"  - {worker_ip}: G:{stats.get('goods', 0)} B:{stats.get('bads', 0)} "
                      f"E:{stats.get('errors', 0)} Off:{stats.get('offline', 0)}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    return True

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)