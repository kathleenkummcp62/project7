#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–∞–Ω–µ—Ä–æ–≤ VPN - –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∫–∞–Ω–µ—Ä–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ VPN
"""

import os
import sys
import json
import time
import signal
import argparse
import subprocess
from pathlib import Path

# –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
parser = argparse.ArgumentParser(description="VPN Scanner Manager")
parser.add_argument("--vpn-type", help="–¢–∏–ø VPN –¥–ª—è –∑–∞–ø—É—Å–∫–∞ (all –¥–ª—è –≤—Å–µ—Ö)")
parser.add_argument("--stop", action="store_true", help="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–∞–Ω–µ—Ä—ã")
parser.add_argument("--status", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–æ–≤")
args = parser.parse_args()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∫–∞–Ω–µ—Ä–æ–≤
SCANNERS = {
    "fortinet": {
        "script": "sers1.py",
        "process_name": "sers1.py",
        "creds_file": "creds/fortinet.txt"
    },
    "paloalto": {
        "script": "sers2.go",
        "process_name": "sers2",
        "creds_file": "creds/paloalto.txt"
    },
    "sonicwall": {
        "script": "sers3.py",
        "process_name": "sers3.py",
        "creds_file": "creds/sonicwall.txt"
    },
    "cisco": {
        "script": "sers4.go",
        "process_name": "sers4",
        "creds_file": "creds/cisco.txt"
    },
    "sophos": {
        "script": "test_scanner.py",
        "process_name": "test_scanner.py",
        "creds_file": "creds/sophos.txt",
        "args": ["--vpn-type", "sophos"]
    },
    "watchguard": {
        "script": "test_scanner.py",
        "process_name": "test_scanner.py",
        "creds_file": "creds/watchguard.txt",
        "args": ["--vpn-type", "watchguard"]
    }
}

def get_running_scanners():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–∫–∞–Ω–µ—Ä–æ–≤"""
    running = {}
    for vpn_type, config in SCANNERS.items():
        process_name = config["process_name"]
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
            output = subprocess.check_output(["pgrep", "-f", process_name]).decode().strip()
            if output:
                pids = output.split("\n")
                running[vpn_type] = pids
        except subprocess.CalledProcessError:
            # –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω
            pass
    return running

def start_scanner(vpn_type):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–µ—Ä –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ VPN"""
    if vpn_type not in SCANNERS:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø VPN: {vpn_type}")
        return False
    
    config = SCANNERS[vpn_type]
    script = config["script"]
    creds_file = config.get("creds_file", "")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —Å–∫–∞–Ω–µ—Ä
    running = get_running_scanners()
    if vpn_type in running:
        print(f"‚ö†Ô∏è –°–∫–∞–Ω–µ—Ä {vpn_type} —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: {', '.join(running[vpn_type])})")
        return False
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞
    cmd = []
    if script.endswith(".py"):
        cmd = ["python3", script]
    elif script.endswith(".go"):
        cmd = ["go", "run", script]
    else:
        cmd = [script]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if "args" in config:
        cmd.extend(config["args"])
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if creds_file:
        cmd.extend(["--creds-file", creds_file])
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    try:
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print(f"üöÄ –ó–∞–ø—É—â–µ–Ω —Å–∫–∞–Ω–µ—Ä {vpn_type} (PID: {process.pid})")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞ {vpn_type}: {e}")
        return False

def stop_scanner(vpn_type):
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–∞–Ω–µ—Ä –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ VPN"""
    running = get_running_scanners()
    if vpn_type not in running:
        print(f"‚ö†Ô∏è –°–∫–∞–Ω–µ—Ä {vpn_type} –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        return False
    
    for pid in running[vpn_type]:
        try:
            os.kill(int(pid), signal.SIGTERM)
            print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–∫–∞–Ω–µ—Ä {vpn_type} (PID: {pid})")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–∞–Ω–µ—Ä–∞ {vpn_type} (PID: {pid}): {e}")
    
    return True

def show_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∫–∞–Ω–µ—Ä–æ–≤"""
    running = get_running_scanners()
    
    print("\nüìä –°—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–æ–≤:")
    print("=" * 50)
    
    for vpn_type, config in SCANNERS.items():
        status = "üü¢ –ó–∞–ø—É—â–µ–Ω" if vpn_type in running else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        pids = f"(PID: {', '.join(running[vpn_type])})" if vpn_type in running else ""
        print(f"{vpn_type.ljust(15)} {status} {pids}")
    
    print("=" * 50)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã stats_*.json
    stats_files = list(Path(".").glob("stats_*.json"))
    if stats_files:
        print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("=" * 50)
        
        total_stats = {
            "goods": 0,
            "bads": 0,
            "errors": 0,
            "offline": 0,
            "ipblock": 0,
            "processed": 0
        }
        
        for stats_file in stats_files:
            try:
                with open(stats_file, "r") as f:
                    stats = json.load(f)
                    pid = stats_file.stem.split("_")[1]
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    for key in total_stats:
                        if key in stats:
                            total_stats[key] += stats[key]
                    
                    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
                    rps = stats.get("rps", 0)
                    print(f"PID {pid}: G:{stats.get('goods', 0)} B:{stats.get('bads', 0)} "
                          f"E:{stats.get('errors', 0)} Off:{stats.get('offline', 0)} "
                          f"Blk:{stats.get('ipblock', 0)} | ‚ö°{rps:.1f}/s")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {stats_file}: {e}")
        
        # –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("-" * 50)
        print(f"–í–°–ï–ì–û: G:{total_stats['goods']} B:{total_stats['bads']} "
              f"E:{total_stats['errors']} Off:{total_stats['offline']} "
              f"Blk:{total_stats['ipblock']} | "
              f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_stats['processed']}")
        print("=" * 50)

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
if __name__ == "__main__":
    if args.status:
        show_status()
        sys.exit(0)
    
    if args.stop:
        if args.vpn_type and args.vpn_type != "all":
            stop_scanner(args.vpn_type)
        else:
            running = get_running_scanners()
            for vpn_type in running:
                stop_scanner(vpn_type)
        sys.exit(0)
    
    if args.vpn_type:
        if args.vpn_type == "all":
            for vpn_type in SCANNERS:
                start_scanner(vpn_type)
        else:
            start_scanner(args.vpn_type)
    else:
        parser.print_help()