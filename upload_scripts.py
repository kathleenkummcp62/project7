#!/usr/bin/env python3
"""
–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ SSH-–≤–æ—Ä–∫–µ—Ä—ã
"""

import os
import sys
import paramiko
import argparse
from pathlib import Path

# –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
parser = argparse.ArgumentParser(description="Upload Scripts to SSH Workers")
parser.add_argument("--credentials", default="credentials.txt", help="–§–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ SSH")
parser.add_argument("--scripts-dir", default="Servis", help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ —Å–∫—Ä–∏–ø—Ç–∞–º–∏")
parser.add_argument("--remote-dir", default="/root/NAM/Servis", help="–£–¥–∞–ª–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤")
parser.add_argument("--verbose", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
args = parser.parse_args()

def parse_credentials(filename):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    credentials = []
    try:
        with open(filename, "r") as f:
            for line in f:
                line = line.strip()
                if not line or line.startswith("#"):
                    continue
                
                parts = line.split(";")
                if len(parts) != 3:
                    print(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: {line}")
                    continue
                
                ip, username, password = parts
                credentials.append((ip, username, password))
        
        return credentials
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
        return []

def upload_scripts(ip, username, password):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ –≤–æ—Ä–∫–µ—Ä"""
    print(f"\nüì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ {ip}")
    
    try:
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(ip, username=username, password=password, timeout=10)
        
        # –°–æ–∑–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        stdin, stdout, stderr = client.exec_command(f"mkdir -p {args.remote_dir}")
        exit_status = stdout.channel.recv_exit_status()
        
        if exit_status != 0:
            error = stderr.read().decode().strip()
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {args.remote_dir}: {error}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã
        sftp = client.open_sftp()
        
        scripts_dir = Path(args.scripts_dir)
        if not scripts_dir.exists():
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ —Å–∫—Ä–∏–ø—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {scripts_dir}")
            client.close()
            return False
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ —Å–∫—Ä–∏–ø—Ç–∞–º–∏
        uploaded_count = 0
        for script_file in scripts_dir.glob("*"):
            if script_file.is_file():
                remote_path = f"{args.remote_dir}/{script_file.name}"
                if args.verbose:
                    print(f"üì§ –ó–∞–≥—Ä—É–∑–∫–∞ {script_file} -> {remote_path}")
                
                sftp.put(str(script_file), remote_path)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤
                if script_file.suffix in [".py", ".sh", ".go"]:
                    sftp.chmod(remote_path, 0o755)
                
                uploaded_count += 1
        
        sftp.close()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫–∞–Ω–µ—Ä
        if os.path.exists("test_scanner.py"):
            sftp = client.open_sftp()
            remote_path = f"{args.remote_dir}/test_scanner.py"
            sftp.put("test_scanner.py", remote_path)
            sftp.chmod(remote_path, 0o755)
            sftp.close()
            uploaded_count += 1
        
        client.close()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {uploaded_count} —Ñ–∞–π–ª–æ–≤ –Ω–∞ {ip}")
        return True
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ {ip}: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ SSH-–≤–æ—Ä–∫–µ—Ä—ã")
    
    # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    credentials = parse_credentials(args.credentials)
    if not credentials:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return False
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(credentials)} –≤–æ—Ä–∫–µ—Ä–æ–≤")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ—Ä–∫–µ—Ä
    results = {}
    for ip, username, password in credentials:
        results[ip] = upload_scripts(ip, username, password)
    
    # –í—ã–≤–æ–¥–∏–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏:")
    success_count = sum(1 for success in results.values() if success)
    for ip, success in results.items():
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {ip}")
    
    print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ {success_count} –∏–∑ {len(credentials)} –≤–æ—Ä–∫–µ—Ä–æ–≤")
    return success_count == len(credentials)

if __name__ == "__main__":
    try:
        if main():
            print("\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("\n‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
    except KeyboardInterrupt:
        print("\nüõë –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)