#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
–°–æ–±–∏—Ä–∞–µ—Ç –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
"""

from __future__ import annotations
import json
import time
import sys
import argparse
import asyncio
import aiofiles
import logging
from pathlib import Path
from typing import Dict, List, Optional, Any, Set
from dataclasses import dataclass, field, asdict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("aggregator.log")
    ]
)
logger = logging.getLogger("aggregator")

@dataclass
class AggregatedStats:
    """–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤"""
    goods: int = 0
    bads: int = 0
    errors: int = 0
    offline: int = 0
    ipblock: int = 0
    processed: int = 0
    rps: float = 0.0
    servers: int = 0
    active_servers: int = 0
    start_time: float = field(default_factory=time.time)
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON"""
        result = asdict(self)
        result.pop('start_time')  # –ù–µ –≤–∫–ª—é—á–∞–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –≤ JSON
        result['timestamp'] = int(time.time())
        result['uptime'] = int(time.time() - self.start_time)
        return result
    
    def update_rps(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ RPS"""
        elapsed = time.time() - self.start_time
        if elapsed > 0:
            self.rps = self.processed / elapsed

@dataclass
class ServerStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    ip: str
    goods: int = 0
    bads: int = 0
    errors: int = 0
    offline: int = 0
    ipblock: int = 0
    processed: int = 0
    rps: float = 0.0
    timestamp: int = 0
    
    @classmethod
    def from_dict(cls, ip: str, data: Dict[str, Any]) -> 'ServerStats':
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        return cls(
            ip=ip,
            goods=data.get('goods', 0),
            bads=data.get('bads', 0),
            errors=data.get('errors', 0),
            offline=data.get('offline', 0),
            ipblock=data.get('ipblock', 0),
            processed=data.get('processed', 0),
            rps=data.get('rps', 0.0),
            timestamp=data.get('timestamp', int(time.time()))
        )

@dataclass
class AggregatorConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞"""
    stats_dir: str
    output_file: str
    poll_interval: int
    verbose: bool
    
    @classmethod
    def from_args(cls, args: argparse.Namespace) -> 'AggregatorConfig':
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        return cls(
            stats_dir=args.stats_dir,
            output_file=args.output,
            poll_interval=args.interval,
            verbose=args.verbose
        )

def human_time(sec: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    m, s = divmod(int(sec), 60)
    h, m = divmod(m, 60)
    return f"{h:02}:{m:02}:{s:02}"

class StatsAggregator:
    """–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤"""
    
    def __init__(self, config: AggregatorConfig):
        self.config = config
        self.stats = AggregatedStats()
        self.server_stats: Dict[str, ServerStats] = {}
        self.stats_dir = Path(config.stats_dir)
        self.output_file = Path(config.output_file)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.stats_dir.mkdir(exist_ok=True, parents=True)
    
    async def collect_stats(self) -> None:
        """–°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤"""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats = AggregatedStats(start_time=self.stats.start_time)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_files = list(self.stats_dir.glob("stats_*.json"))
        active_servers: Set[str] = set()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        for stats_file in stats_files:
            try:
                # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                async with aiofiles.open(stats_file, 'r') as f:
                    content = await f.read()
                    data = json.loads(content)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º IP –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                ip = stats_file.stem.replace('stats_', '')
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞
                server_stats = ServerStats.from_dict(ip, data)
                self.server_stats[ip] = server_stats
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 30 —Å–µ–∫—É–Ω–¥)
                if time.time() - server_stats.timestamp < 30:
                    active_servers.add(ip)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.stats.goods += server_stats.goods
                self.stats.bads += server_stats.bads
                self.stats.errors += server_stats.errors
                self.stats.offline += server_stats.offline
                self.stats.ipblock += server_stats.ipblock
                self.stats.processed += server_stats.processed
                self.stats.rps += server_stats.rps
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {stats_file}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤
        self.stats.servers = len(self.server_stats)
        self.stats.active_servers = len(active_servers)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        try:
            async with aiofiles.open(self.output_file, 'w') as f:
                await f.write(json.dumps(self.stats.to_dict()))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def run(self) -> None:
        """–ó–∞–ø—É—Å–∫ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞"""
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {self.stats_dir}")
        logger.info(f"üìä –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞: {self.config.poll_interval} —Å–µ–∫")
        
        try:
            while True:
                await self.collect_stats()
                
                if self.config.verbose:
                    uptime = time.time() - self.stats.start_time
                    logger.info(
                        f"[Stat] G:{self.stats.goods} B:{self.stats.bads} E:{self.stats.errors} "
                        f"Off:{self.stats.offline} Blk:{self.stats.ipblock} | "
                        f"‚ö°{self.stats.rps:.1f}/s | Uptime {human_time(uptime)} | "
                        f"Servers: {self.stats.active_servers}/{self.stats.servers}"
                    )
                
                await asyncio.sleep(self.config.poll_interval)
        except asyncio.CancelledError:
            logger.info("–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–µ: {e}")

def parse_arguments() -> argparse.Namespace:
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description="Stats Aggregator")
    parser.add_argument("--stats-dir", default=".", help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ñ–∞–π–ª–∞–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    parser.add_argument("--output", default="aggregated_stats.json", help="–§–∞–π–ª –¥–ª—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    parser.add_argument("--interval", type=int, default=5, help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    parser.add_argument("--verbose", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
    parser.add_argument("--log-level", default="INFO", choices=["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"], help="–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    return parser.parse_args()

async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    args = parse_arguments()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.setLevel(getattr(logging, args.log_level))
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞
    config = AggregatorConfig.from_args(args)
    aggregator = StatsAggregator(config)
    await aggregator.run()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.warning("üõë –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)