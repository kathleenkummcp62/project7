#!/usr/bin/env python3
"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞ VPN —Å–∫–∞–Ω–µ—Ä–∞
"""

import os
import sys
import json
import time
import subprocess
import argparse
from pathlib import Path

# –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
parser = argparse.ArgumentParser(description="Dashboard Setup")
parser.add_argument("--port", type=int, default=8080, help="–ü–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞")
parser.add_argument("--setup", action="store_true", help="–¢–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞")
parser.add_argument("--dev", action="store_true", help="–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
args = parser.parse_args()

def run_command(cmd, check=True):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    print(f"üìã –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {' '.join(cmd)}")
    result = subprocess.run(cmd, capture_output=True, text=True)
    
    if result.stdout:
        print(result.stdout)
    
    if result.stderr:
        print(f"‚ö†Ô∏è {result.stderr}", file=sys.stderr)
    
    if check and result.returncode != 0:
        print(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ {result.returncode})")
        sys.exit(1)
    
    return result

def setup_dashboard():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    try:
        run_command(["go", "version"])
        run_command(["node", "--version"])
        run_command(["npm", "--version"])
    except FileNotFoundError:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (go, node, npm)")
        sys.exit(1)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Go
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Go...")
    run_command(["go", "mod", "download"])
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Node.js
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Node.js...")
    run_command(["npm", "install"])
    
    # –°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    print("üèóÔ∏è –°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
    run_command(["npm", "run", "build"])
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    run_command(["python3", "setup_db.py"])
    
    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def start_dashboard():
    """–ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞ –Ω–∞ –ø–æ—Ä—Ç—É {args.port}...")
    
    if args.dev:
        # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        print("üîß –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        
        # –ó–∞–ø—É—Å–∫ –±—ç–∫–µ–Ω–¥–∞
        backend_cmd = ["go", "run", "cmd/dashboard/main.go", f"-port={args.port}"]
        backend_process = subprocess.Popen(backend_cmd)
        
        # –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        frontend_cmd = ["npm", "run", "dev", "--", "--port", str(args.port + 1)]
        frontend_process = subprocess.Popen(frontend_cmd)
        
        try:
            print(f"üìä –î–∞—à–±–æ—Ä–¥ –∑–∞–ø—É—â–µ–Ω:")
            print(f"  - –ë—ç–∫–µ–Ω–¥: http://localhost:{args.port}")
            print(f"  - –§—Ä–æ–Ω—Ç–µ–Ω–¥: http://localhost:{args.port + 1}")
            print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            backend_process.wait()
        except KeyboardInterrupt:
            print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            backend_process.terminate()
            frontend_process.terminate()
    else:
        # –ó–∞–ø—É—Å–∫ –≤ production —Ä–µ–∂–∏–º–µ
        cmd = ["go", "run", "cmd/dashboard/main.go", f"-port={args.port}"]
        try:
            subprocess.run(cmd)
        except KeyboardInterrupt:
            print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞
    setup_dashboard()
    
    # –ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω —Ñ–ª–∞–≥ --setup
    if not args.setup:
        start_dashboard()