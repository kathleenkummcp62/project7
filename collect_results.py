#!/usr/bin/env python3
"""
–°–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
"""

import os
import sys
import time
import json
import random
import string
import paramiko
import argparse
from pathlib import Path
from datetime import datetime

# –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
parser = argparse.ArgumentParser(description="Collect Scan Results")
parser.add_argument("--credentials", default="credentials.txt", help="–§–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ SSH")
parser.add_argument("--remote-dir", default="/root/NAM/Servis", help="–£–¥–∞–ª–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ —Å–∫—Ä–∏–ø—Ç–∞–º–∏")
parser.add_argument("--output-dir", default="Valid", help="–õ–æ–∫–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
parser.add_argument("--verbose", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
args = parser.parse_args()

def random_string(length=5):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(length))

def parse_credentials(filename):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    credentials = []
    try:
        with open(filename, "r") as f:
            for line in f:
                line = line.strip()
                if not line or line.startswith("#"):
                    continue
                
                parts = line.split(";")
                if len(parts) != 3:
                    print(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: {line}")
                    continue
                
                ip, username, password = parts
                credentials.append((ip, username, password))
        
        return credentials
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
        return []

def collect_results(ip, username, password):
    """–°–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞"""
    print(f"\nüì• –°–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å {ip}")
    
    try:
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(ip, username=username, password=password, timeout=10)
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        os.makedirs(args.output_dir, exist_ok=True)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —É–¥–∞–ª–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        sftp = client.open_sftp()
        
        try:
            remote_files = sftp.listdir(args.remote_dir)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
            sftp.close()
            client.close()
            return False
        
        # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        valid_files = [f for f in remote_files if f.startswith("valid") and f.endswith(".txt")]
        stats_files = [f for f in remote_files if f.startswith("stats_") and f.endswith(".json")]
        
        if not valid_files and not stats_files:
            print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–∞ {ip}")
            sftp.close()
            client.close()
            return False
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        downloaded_count = 0
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º valid*.txt
        for valid_file in valid_files:
            remote_path = f"{args.remote_dir}/{valid_file}"
            
            try:
                with sftp.file(remote_path, "r") as remote_f:
                    content = remote_f.read().decode("utf-8")
                
                if content.strip():
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    random_suffix = random_string()
                    local_filename = f"{ip}_{valid_file}_{timestamp}_{random_suffix}.txt"
                    local_path = os.path.join(args.output_dir, local_filename)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                    with open(local_path, "w", encoding="utf-8") as local_f:
                        local_f.write(content)
                    
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª {valid_file} ({len(content.splitlines())} —Å—Ç—Ä–æ–∫)")
                    downloaded_count += 1
                    
                    # –£–¥–∞–ª—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                    sftp.remove(remote_path)
                else:
                    print(f"‚ö†Ô∏è –§–∞–π–ª {valid_file} –ø—É—Å—Ç")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {valid_file}: {e}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º stats_*.json
        for stats_file in stats_files:
            remote_path = f"{args.remote_dir}/{stats_file}"
            
            try:
                with sftp.file(remote_path, "r") as remote_f:
                    content = remote_f.read().decode("utf-8")
                
                # –ü–∞—Ä—Å–∏–º JSON –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                try:
                    stats = json.loads(content)
                    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å {ip}:")
                    print(f"  - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats.get('processed', 0)}")
                    print(f"  - –í–∞–ª–∏–¥–Ω—ã—Ö: {stats.get('goods', 0)}")
                    print(f"  - –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {stats.get('bads', 0)}")
                    print(f"  - –û—à–∏–±–æ–∫: {stats.get('errors', 0)}")
                    print(f"  - –û—Ñ–ª–∞–π–Ω: {stats.get('offline', 0)}")
                    print(f"  - IP –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {stats.get('ipblock', 0)}")
                except json.JSONDecodeError:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {stats_file}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {stats_file}: {e}")
        
        sftp.close()
        client.close()
        
        if downloaded_count > 0:
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {downloaded_count} —Ñ–∞–π–ª–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å {ip}")
            return True
        else:
            print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–∞ {ip}")
            return False
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {ip}: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üì• –°–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤")
    
    # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    credentials = parse_credentials(args.credentials)
    if not credentials:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return False
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(credentials)} –≤–æ—Ä–∫–µ—Ä–æ–≤")
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –∫–∞–∂–¥–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
    results = {}
    for ip, username, password in credentials:
        results[ip] = collect_results(ip, username, password)
    
    # –í—ã–≤–æ–¥–∏–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–±–æ—Ä–∞:")
    success_count = sum(1 for success in results.values() if success)
    for ip, success in results.items():
        status = "‚úÖ" if success else "‚ö†Ô∏è"
        print(f"{status} {ip}")
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª
    output_dir = Path(args.output_dir)
    all_valid_path = output_dir / "all_valid_results.txt"
    
    try:
        # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        unique_lines = set()
        for result_file in output_dir.glob("*.txt"):
            if result_file.name == all_valid_path.name:
                continue
            
            with open(result_file, "r", encoding="utf-8") as f:
                for line in f:
                    line = line.strip()
                    if line:
                        unique_lines.add(line)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—â–∏–π —Ñ–∞–π–ª
        with open(all_valid_path, "w", encoding="utf-8") as f:
            for line in sorted(unique_lines):
                f.write(f"{line}\n")
        
        print(f"\n‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {all_valid_path}")
        print(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(unique_lines)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞–ª–∏–¥–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    return success_count > 0

if __name__ == "__main__":
    try:
        if main():
            print("\n‚úÖ –°–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print("\n‚ö†Ô∏è –°–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
    except KeyboardInterrupt:
        print("\nüõë –°–±–æ—Ä –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)